{
  "openapi": "3.0.4",
  "info": {
    "title": "GetGrinnected API",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://node16049-csc324--spring2025.us.reclaim.cloud/"
    }
  ],
  "tags": [
    {
      "name": "events",
      "description": "Getting calendar events."
    },
    {
      "name": "user",
      "description": "Logging in and changing user settings."
    }
  ],
  "paths": {
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Check if user exists.",
        "description": "Check if a user exists with the specified username.",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Whether the user exists.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "result": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Log in.",
        "description": "Log in an existing user, which will send a one-time code to their email. \n\nWill fail with status `400` if no email address is provided in request body.\n\nWill fail with status `404` if the user you are attempting to log in does not exist.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "example@grinnell.edu"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "boolean",
                      "example": "OTP successfully sent."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "properties": {
                    "error": {
                      "example": "No email"
                    },
                    "message": {
                      "example": "An email must be provided in the body of the request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such user",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "properties": {
                    "error": {
                      "example": "No such user"
                    },
                    "message": {
                      "example": "No user account exists with that email."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/signup": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Sign up.",
        "description": "Sign up a new user account. \n\nWill fail with status `400` if any of these errors are present.\n- Username or email are not provided in request body\n- Username or email are already associated with an account\n- Email does not end with @grinnell.edu\n- Username does not follow rules (TODO: DO THOSE GO HERE?)\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "example@grinnell.edu"
                  },
                  "username": {
                    "type": "string",
                    "example": "example_user"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Account created.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "boolean",
                      "example": "Account created, and OTP successfully sent."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "properties": {
                    "error": {
                      "example": "Invalid username"
                    },
                    "message": {
                      "example": "Username must not contain the sequences '_.', '._', '..', or '__'."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/resend-otp": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Resend OTP code for login/signup.",
        "description": "Resend an OTP code to a user, such as if they do not recieve their code when logging in.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "example@grinnell.edu"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "boolean",
                      "example": "OTP successfully sent."
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "properties": {
                    "error": {
                      "example": "No email"
                    },
                    "message": {
                      "example": "An email must be provided in the body of the request."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "No such user",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "properties": {
                    "error": {
                      "example": "No such user"
                    },
                    "message": {
                      "example": "No user account exists with that email."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/verify": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Verify recieved OTP code.",
        "description": "Verify the OTP code that has been sent to a user's email. If the code is correct and has not expired, an authorization and a refresh token will be sent back.\n\nThe authorization token should be sent with all authenticated requests, and expires after 15 minutes.\n\nThe refresh token can be used to refresh itself and the authorization token, and expires after 30 days unless refreshed.\n",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string",
                    "example": "example@grinnell.edu"
                  },
                  "code": {
                    "type": "string",
                    "example": 123456
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful verification.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully authenticated"
                    },
                    "refresh_token": {
                      "$ref": "#/components/schemas/AuthToken"
                    },
                    "access_token": {
                      "$ref": "#/components/schemas/AuthToken"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request.",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Error"
                    }
                  ],
                  "properties": {
                    "error": {
                      "example": "Bad code"
                    },
                    "message": {
                      "example": "Could not verify OTP."
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/user/data": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user data when logged in.",
        "description": "Get user data from the database.\n",
        "security": [
          {
            "auth_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/InvalidToken"
          },
          "404": {
            "$ref": "#/components/responses/NoSuchUser"
          }
        }
      }
    },
    "/user/token-refresh": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Refresh user tokens when logged in.",
        "description": "Refresh user tokens using a refresh token, which you can only get by logging in previously.",
        "security": [
          {
            "refresh_token": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful request.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Successfully refreshed"
                    },
                    "refresh_token": {
                      "$ref": "#/components/schemas/AuthToken"
                    },
                    "auth_token": {
                      "$ref": "#/components/schemas/AuthToken"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/InvalidToken"
          },
          "404": {
            "$ref": "#/components/responses/NoSuchUser"
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Find all events.",
        "description": "Find all events stored in the database.",
        "operationId": "findAllEvents",
        "parameters": [
          {
            "$ref": "#/components/parameters/tags"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EventSuccess"
          }
        }
      }
    },
    "/events/between/{start}/{end}": {
      "get": {
        "tags": [
          "events"
        ],
        "summary": "Find events between dates.",
        "description": "Find all events between a start and end time.\n\n\n`start` and `end` parameters must match one of these valid formats:\n\n\n- `YYYY-MM-DD` for a date at midnight, in Grinnell time (UTC-5).\n\n- `YYYY-MM-DDTHH:MM` for a date and time, in Grinnell time (UTC-5).\n\n- `YYYY-MM-DDTHH:MMZ` for a date and time, in a specific timezone\nTimezones should be formatted like `-0600` or `+1200`.\n",
        "operationId": "findEventsBetween",
        "parameters": [
          {
            "name": "start",
            "in": "path",
            "description": "Start of the period to search. Format must match description above.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string",
              "example": "2025-04-07"
            }
          },
          {
            "name": "end",
            "in": "path",
            "description": "End of the period to search. Format must match description above.",
            "required": true,
            "explode": true,
            "schema": {
              "type": "string",
              "example": "2025-04-08"
            }
          },
          {
            "$ref": "#/components/parameters/tags"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/EventSuccess"
          },
          "400": {
            "description": "Invalid request. Dates must follow correct format and start date must be before end date.\n",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ErrorDateInvalid"
                    },
                    {
                      "$ref": "#/components/schemas/ErrorDateOrder"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "auth_token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Authorization token, expiration 15 minutes."
      },
      "refresh_token": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Refresh token, expiration 30 days."
      }
    },
    "parameters": {
      "tags": {
        "name": "tags",
        "in": "query",
        "description": "Events must have all of these tags if specified.",
        "required": false,
        "schema": {
          "$ref": "#/components/schemas/Tags"
        }
      }
    },
    "responses": {
      "EventSuccess": {
        "description": "Successful operation.",
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/Event"
              }
            }
          }
        }
      },
      "Unauthorized": {
        "description": "No such user.",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                }
              ],
              "properties": {
                "error": {
                  "example": "Token required"
                },
                "message": {
                  "example": "An authorization token is required, but it was not provided."
                }
              }
            }
          }
        }
      },
      "InvalidToken": {
        "description": "Invalid or expired token.",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                }
              ],
              "properties": {
                "error": {
                  "example": "Invalid or expired token"
                },
                "message": {
                  "example": "The authorization token provided was not valid, or has expired. Please request a new token."
                }
              }
            }
          }
        }
      },
      "NoSuchUser": {
        "description": "No such user.",
        "content": {
          "application/json": {
            "schema": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Error"
                }
              ],
              "properties": {
                "error": {
                  "example": "No such user"
                },
                "message": {
                  "example": "You are verified with email example@grinnell.edu, but no user exists with that address."
                }
              }
            }
          }
        }
      }
    },
    "schemas": {
      "Event": {
        "type": "object",
        "properties": {
          "eventid": {
            "type": "integer",
            "example": 30881,
            "description": "ID of the event in Grinnell Events."
          },
          "event_name": {
            "type": "string",
            "example": "Grinnell Advocates Karaoke",
            "description": "Name of the event."
          },
          "event_description": {
            "type": "string",
            "example": "\\n  Grinnell Advocates Karaoke\\n",
            "description": "Description of the event."
          },
          "event_location": {
            "type": "string",
            "example": "Bob’s Underground - Main Hall",
            "description": "Location the event takes place."
          },
          "organizations": {
            "type": "array",
            "example": [
              "Advocates",
              " Crssj"
            ],
            "description": "Array of organizations in charge.",
            "items": {
              "description": "Organization names.",
              "type": "string"
            }
          },
          "rsvp": {
            "type": "integer",
            "example": 0,
            "enum": [
              0,
              1
            ],
            "description": "Whether the event requires rsvp."
          },
          "event_date": {
            "type": "string",
            "example": "April 8",
            "description": "Human-readable date the event takes place."
          },
          "event_all_day": {
            "type": "integer",
            "example": 0,
            "enum": [
              0,
              1
            ],
            "description": "Whether the event is all-day."
          },
          "event_start_time": {
            "type": "string",
            "example": "2025-04-09T00:00:00.000Z",
            "description": "Event start time in UTC."
          },
          "event_end_time": {
            "type": "string",
            "example": "2025-04-09T02:00:00.000Z",
            "description": "Event end time in UTC"
          },
          "tags": {
            "$ref": "#/components/schemas/Tags"
          },
          "event_private": {
            "type": "integer",
            "example": 0,
            "description": "Whether the event is private.",
            "enum": [
              0,
              1
            ]
          },
          "repeats": {
            "type": "integer",
            "example": 0,
            "description": "Whether the event repeats.",
            "enum": [
              0,
              1
            ]
          },
          "event_image": {
            "type": "string",
            "example": null,
            "description": "Path to image for event."
          },
          "is_draft": {
            "type": "integer",
            "example": 0,
            "description": "Whether the event is a draft.",
            "enum": [
              0,
              1
            ]
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "accountid": {
            "type": "integer",
            "example": 10
          },
          "account_name": {
            "type": "string",
            "example": "example_user"
          },
          "email": {
            "type": "string",
            "example": "example@grinnell.edu"
          },
          "password": {
            "type": "string",
            "example": null
          },
          "profile_picture": {
            "type": "string",
            "example": null
          },
          "favorited_events": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              14,
              20,
              77
            ]
          },
          "favorited_orgs": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              12,
              13,
              14
            ]
          },
          "drafted_events": {
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              21
            ]
          },
          "favorited_tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": [
              "foo",
              "bar"
            ]
          },
          "account_description": {
            "type": "string"
          },
          "account_role": {
            "type": "integer",
            "enum": [
              0,
              1,
              2
            ],
            "example": 0
          }
        }
      },
      "Tags": {
        "type": "array",
        "example": [
          "Music",
          "Students"
        ],
        "description": "Array of event tags.",
        "items": {
          "description": "Tag names.",
          "type": "string"
        }
      },
      "AuthToken": {
        "type": "string",
        "description": "Authorization or refresh token.",
        "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
      },
      "Error": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "example": "Unknown error"
          },
          "message": {
            "type": "string",
            "example": "An unknown error has occured."
          }
        }
      },
      "ErrorDateOrder": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          }
        ],
        "properties": {
          "error": {
            "example": "Invalid date"
          },
          "message": {
            "example": "Start date could not be read properly."
          }
        }
      },
      "ErrorDateInvalid": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Error"
          }
        ],
        "properties": {
          "error": {
            "example": "Bad date order"
          },
          "message": {
            "example": "Start date must occur before end date."
          }
        }
      }
    }
  }
}
